{
  "version": 3,
  "sources": ["../../hex-to-rgba/build/index.js"],
  "sourcesContent": ["\"use strict\";\n\nvar removeHash = function removeHash(hex) {\n  return hex.charAt(0) === '#' ? hex.slice(1) : hex;\n};\n\nvar parseHex = function parseHex(nakedHex) {\n  var isShort = nakedHex.length === 3 || nakedHex.length === 4;\n  var twoDigitHexR = isShort ? \"\".concat(nakedHex.slice(0, 1)).concat(nakedHex.slice(0, 1)) : nakedHex.slice(0, 2);\n  var twoDigitHexG = isShort ? \"\".concat(nakedHex.slice(1, 2)).concat(nakedHex.slice(1, 2)) : nakedHex.slice(2, 4);\n  var twoDigitHexB = isShort ? \"\".concat(nakedHex.slice(2, 3)).concat(nakedHex.slice(2, 3)) : nakedHex.slice(4, 6);\n  var twoDigitHexA = (isShort ? \"\".concat(nakedHex.slice(3, 4)).concat(nakedHex.slice(3, 4)) : nakedHex.slice(6, 8)) || 'ff'; // const numericA = +((parseInt(a, 16) / 255).toFixed(2));\n\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA\n  };\n};\n\nvar hexToDecimal = function hexToDecimal(hex) {\n  return parseInt(hex, 16);\n};\n\nvar hexesToDecimals = function hexesToDecimals(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b,\n      a = _ref.a;\n  return {\n    r: hexToDecimal(r),\n    g: hexToDecimal(g),\n    b: hexToDecimal(b),\n    a: +(hexToDecimal(a) / 255).toFixed(2)\n  };\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}; // eslint-disable-line no-restricted-globals, max-len\n\n\nvar formatRgb = function formatRgb(decimalObject, parameterA) {\n  var r = decimalObject.r,\n      g = decimalObject.g,\n      b = decimalObject.b,\n      parsedA = decimalObject.a;\n  var a = isNumeric(parameterA) ? parameterA : parsedA;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n};\n/**\n * Turns an old-fashioned css hex color value into a rgb color value.\n *\n * If you specify an alpha value, you'll get a rgba() value instead.\n *\n * @param The hex value to convert. ('123456'. '#123456', ''123', '#123')\n * @param An alpha value to apply. (optional) ('0.5', '0.25')\n * @return An rgb or rgba value. ('rgb(11, 22, 33)'. 'rgba(11, 22, 33, 0.5)')\n */\n\n\nvar hexToRgba = function hexToRgba(hex, a) {\n  var hashlessHex = removeHash(hex);\n  var hexObject = parseHex(hashlessHex);\n  var decimalObject = hexesToDecimals(hexObject);\n  return formatRgb(decimalObject, a);\n};\n\nmodule.exports = hexToRgba;"],
  "mappings": ";;;;;AAAA;AAAA;AAEA,QAAI,aAAa,SAASA,YAAW,KAAK;AACxC,aAAO,IAAI,OAAO,CAAC,MAAM,MAAM,IAAI,MAAM,CAAC,IAAI;AAAA,IAChD;AAEA,QAAI,WAAW,SAASC,UAAS,UAAU;AACzC,UAAI,UAAU,SAAS,WAAW,KAAK,SAAS,WAAW;AAC3D,UAAI,eAAe,UAAU,GAAG,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,MAAM,GAAG,CAAC;AAC/G,UAAI,eAAe,UAAU,GAAG,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,MAAM,GAAG,CAAC;AAC/G,UAAI,eAAe,UAAU,GAAG,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,MAAM,GAAG,CAAC;AAC/G,UAAI,gBAAgB,UAAU,GAAG,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,SAAS,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,MAAM,GAAG,CAAC,MAAM;AAEtH,aAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAAA,IACF;AAEA,QAAI,eAAe,SAASC,cAAa,KAAK;AAC5C,aAAO,SAAS,KAAK,EAAE;AAAA,IACzB;AAEA,QAAI,kBAAkB,SAASC,iBAAgB,MAAM;AACnD,UAAI,IAAI,KAAK,GACT,IAAI,KAAK,GACT,IAAI,KAAK,GACT,IAAI,KAAK;AACb,aAAO;AAAA,QACL,GAAG,aAAa,CAAC;AAAA,QACjB,GAAG,aAAa,CAAC;AAAA,QACjB,GAAG,aAAa,CAAC;AAAA,QACjB,GAAG,EAAE,aAAa,CAAC,IAAI,KAAK,QAAQ,CAAC;AAAA,MACvC;AAAA,IACF;AAEA,QAAI,YAAY,SAASC,WAAU,GAAG;AACpC,aAAO,CAAC,MAAM,WAAW,CAAC,CAAC,KAAK,SAAS,CAAC;AAAA,IAC5C;AAGA,QAAI,YAAY,SAASC,WAAU,eAAe,YAAY;AAC5D,UAAI,IAAI,cAAc,GAClB,IAAI,cAAc,GAClB,IAAI,cAAc,GAClB,UAAU,cAAc;AAC5B,UAAI,IAAI,UAAU,UAAU,IAAI,aAAa;AAC7C,aAAO,QAAQ,OAAO,GAAG,IAAI,EAAE,OAAO,GAAG,IAAI,EAAE,OAAO,GAAG,IAAI,EAAE,OAAO,GAAG,GAAG;AAAA,IAC9E;AAYA,QAAI,YAAY,SAASC,WAAU,KAAK,GAAG;AACzC,UAAI,cAAc,WAAW,GAAG;AAChC,UAAI,YAAY,SAAS,WAAW;AACpC,UAAI,gBAAgB,gBAAgB,SAAS;AAC7C,aAAO,UAAU,eAAe,CAAC;AAAA,IACnC;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": ["removeHash", "parseHex", "hexToDecimal", "hexesToDecimals", "isNumeric", "formatRgb", "hexToRgba"]
}
